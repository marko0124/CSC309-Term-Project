datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int       @id @default(autoincrement())
  utorid     String    @unique
  name       String
  email      String    @unique
  password   String    @default("")
  birthday   DateTime  @default(now())
  points     Int       @default(0)
  verified   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  role       String    @default("regular")
  avatarUrl  String?
  lastLogin  DateTime?
  sus        Boolean   @default(false)
  resetToken String?
  expiresAt  DateTime?

  received  Transaction[] @relation("Received")
  sent      Transaction[] @relation("Sent")
  processed Transaction[] @relation("Processed")
  created   Transaction[] @relation("Created")

  promotions Promotion[] @relation("UserPromotions")

  organized Event[] @relation("EventOrganizers")
  attended  Event[] @relation("EventGuests")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  transactionType String
  amount          Float?
  points          Int
  pointsWitheld   Int      @default(0)
  createdAt       DateTime @default(now())
  sus             Boolean  @default(false)
  remark          String?
  relatedId       Int?

  receiverId  Int?
  receiver    User? @relation("Received", fields: [receiverId], references: [id])
  senderId    Int?
  sender      User? @relation("Sent", fields: [senderId], references: [id])
  processorId Int?
  processor   User? @relation("Processed", fields: [processorId], references: [id])
  creatorId   Int?
  createdBy   User? @relation("Created", fields: [creatorId], references: [id])

  event      Event[]     @relation("EventTransactions")
  promotions Promotion[] @relation("TransactionPromotions")

  needVerify Boolean @default(false)
  verified   Boolean @default(true)
}

model Event {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  location      String
  start         DateTime
  end           DateTime
  capacity      Int?
  full          Boolean       @default(false)
  points        Int           @default(0)
  pointsRemain  Int           @default(0)
  pointsAwarded Int           @default(0)
  published     Boolean       @default(false)
  creatorId     Int
  organizers    User[]        @relation("EventOrganizers")
  guests        User[]        @relation("EventGuests")
  transactions  Transaction[] @relation("EventTransactions")
  createdAt     DateTime      @default(now())
}

model Promotion {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  type         String
  rate         Float?
  points       Int?
  start        DateTime
  end          DateTime
  minSpend     Float?
  transactions Transaction[] @relation("TransactionPromotions")
  users        User[]        @relation("UserPromotions")
  createdAt    DateTime      @default(now())
}
